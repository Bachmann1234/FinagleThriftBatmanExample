/**
 * Generated by Scrooge
 *   version: 18.6.0
 *   rev: 4d5c08c211c7320d0d225bba35a74bdc47c750e6
 *   built at: 20180617-175206
 */
package thrift

import com.twitter.io.Buf
import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil,
  ValidatingThriftStruct,
  ValidatingThriftStructCodec3
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object Villain extends ValidatingThriftStructCodec3[Villain] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Villain")
  val VillainIdField = new TField("villainId", TType.I32, 1)
  val VillainIdFieldManifest = implicitly[Manifest[Int]]
  val NameField = new TField("name", TType.STRING, 2)
  val NameFieldManifest = implicitly[Manifest[String]]
  val DescriptionField = new TField("description", TType.STRING, 3)
  val DescriptionFieldManifest = implicitly[Manifest[String]]
  val HideoutLocationField = new TField("hideoutLocation", TType.STRUCT, 5)
  val HideoutLocationFieldManifest = implicitly[Manifest[thrift.Location]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      VillainIdField,
      false,
      true,
      VillainIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NameField,
      false,
      true,
      NameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      DescriptionField,
      true,
      false,
      DescriptionFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      HideoutLocationField,
      true,
      false,
      HideoutLocationFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Villain): Unit = {
    if (_item.name == null) throw new TProtocolException("Required field name cannot be null")
  }

  /**
   * Checks that the struct is a valid as a new instance. If there are any missing required or
   * construction required fields, return a non-empty list.
   */
  def validateNewInstance(item: Villain): scala.Seq[com.twitter.scrooge.validation.Issue] = {
    val buf = scala.collection.mutable.ListBuffer.empty[com.twitter.scrooge.validation.Issue]

    buf ++= validateField(item.villainId)
    if (item.name == null)
      buf += com.twitter.scrooge.validation.MissingRequiredField(fieldInfos.apply(1))
    buf ++= validateField(item.name)
    buf ++= validateField(item.description)
    buf ++= validateField(item.hideoutLocation)
    buf.toList
  }

  def withoutPassthroughFields(original: Villain): Villain =
    new Immutable(
      villainId =
        {
          val field = original.villainId
          field
        },
      name =
        {
          val field = original.name
          field
        },
      description =
        {
          val field = original.description
          field.map { field =>
            field
          }
        },
      hideoutLocation =
        {
          val field = original.hideoutLocation
          field.map { field =>
            thrift.Location.withoutPassthroughFields(field)
          }
        }
    )

  override def encode(_item: Villain, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): Villain = {

    var villainId: Int = 0
    var _got_villainId = false
    var nameOffset: Int = -1
    var _got_name = false
    var descriptionOffset: Int = -1
    var hideoutLocation: Option[thrift.Location] = None

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                villainId = readVillainIdValue(_iprot)
                _got_villainId = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'villainId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                nameOffset = _iprot.offsetSkipString
    
                _got_name = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                descriptionOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'description' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRUCT =>
    
                hideoutLocation = Some(readHideoutLocationValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'hideoutLocation' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_villainId) throw new TProtocolException("Required field 'villainId' was not found in serialized data for struct Villain")
    if (!_got_name) throw new TProtocolException("Required field 'name' was not found in serialized data for struct Villain")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      villainId,
      nameOffset,
      descriptionOffset,
      hideoutLocation,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Villain =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thrift] def eagerDecode(_iprot: TProtocol): Villain = {
    var villainId: Int = 0
    var _got_villainId = false
    var name: String = null
    var _got_name = false
    var description: _root_.scala.Option[String] = _root_.scala.None
    var hideoutLocation: _root_.scala.Option[thrift.Location] = _root_.scala.None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                villainId = readVillainIdValue(_iprot)
                _got_villainId = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'villainId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                name = readNameValue(_iprot)
                _got_name = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'name' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                description = _root_.scala.Some(readDescriptionValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'description' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRUCT =>
                hideoutLocation = _root_.scala.Some(readHideoutLocationValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRUCT
                throw new TProtocolException(
                  "Received wrong type for field 'hideoutLocation' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_villainId) throw new TProtocolException("Required field 'villainId' was not found in serialized data for struct Villain")
    if (!_got_name) throw new TProtocolException("Required field 'name' was not found in serialized data for struct Villain")
    new Immutable(
      villainId,
      name,
      description,
      hideoutLocation,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    villainId: Int,
    name: String,
    description: _root_.scala.Option[String] = _root_.scala.None,
    hideoutLocation: _root_.scala.Option[thrift.Location] = _root_.scala.None
  ): Villain =
    new Immutable(
      villainId,
      name,
      description,
      hideoutLocation
    )

  def unapply(_item: Villain): _root_.scala.Option[_root_.scala.Tuple4[Int, String, Option[String], Option[thrift.Location]]] = _root_.scala.Some(_item.toTuple)


  @inline private[thrift] def readVillainIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeVillainIdField(villainId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(VillainIdField)
    writeVillainIdValue(villainId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeVillainIdValue(villainId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(villainId_item)
  }

  @inline private[thrift] def readNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNameField(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NameField)
    writeNameValue(name_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNameValue(name_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(name_item)
  }

  @inline private[thrift] def readDescriptionValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeDescriptionField(description_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(DescriptionField)
    writeDescriptionValue(description_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeDescriptionValue(description_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(description_item)
  }

  @inline private[thrift] def readHideoutLocationValue(_iprot: TProtocol): thrift.Location = {
    thrift.Location.decode(_iprot)
  }

  @inline private def writeHideoutLocationField(hideoutLocation_item: thrift.Location, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(HideoutLocationField)
    writeHideoutLocationValue(hideoutLocation_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeHideoutLocationValue(hideoutLocation_item: thrift.Location, _oprot: TProtocol): Unit = {
    hideoutLocation_item.write(_oprot)
  }


  object Immutable extends ThriftStructCodec3[Villain] {
    override def encode(_item: Villain, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Villain = Villain.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Villain] = Villain.metaData
  }

  /**
   * The default read-only implementation of Villain.  You typically should not need to
   * directly reference this class; instead, use the Villain.apply method to construct
   * new instances.
   */
  class Immutable(
      val villainId: Int,
      val name: String,
      val description: _root_.scala.Option[String],
      val hideoutLocation: _root_.scala.Option[thrift.Location],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Villain {
    def this(
      villainId: Int,
      name: String,
      description: _root_.scala.Option[String] = _root_.scala.None,
      hideoutLocation: _root_.scala.Option[thrift.Location] = _root_.scala.None
    ) = this(
      villainId,
      name,
      description,
      hideoutLocation,
      Map.empty[Short, TFieldBlob]
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val villainId: Int,
      nameOffset: Int,
      descriptionOffset: Int,
      val hideoutLocation: _root_.scala.Option[thrift.Location],
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Villain {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val name: String =
      if (nameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, nameOffset)
      }
    lazy val description: _root_.scala.Option[String] =
      if (descriptionOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, descriptionOffset))
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Villain trait with additional state or
   * behavior and implement the read-only methods from Villain using an underlying
   * instance.
   */
  trait Proxy extends Villain {
    protected def _underlying_Villain: Villain
    override def villainId: Int = _underlying_Villain.villainId
    override def name: String = _underlying_Villain.name
    override def description: _root_.scala.Option[String] = _underlying_Villain.description
    override def hideoutLocation: _root_.scala.Option[thrift.Location] = _underlying_Villain.hideoutLocation
    override def _passthroughFields = _underlying_Villain._passthroughFields
  }
}

/**
 * Prefer the companion object's [[thrift.Villain.apply]]
 * for construction if you don't need to specify passthrough fields.
 */
trait Villain
  extends ThriftStruct
  with _root_.scala.Product4[Int, String, Option[String], Option[thrift.Location]]
  with ValidatingThriftStruct[Villain]
  with java.io.Serializable
{
  import Villain._

  def villainId: Int
  def name: String
  def description: _root_.scala.Option[String]
  def hideoutLocation: _root_.scala.Option[thrift.Location]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = villainId
  def _2 = name
  def _3 = description
  def _4 = hideoutLocation

  def toTuple: _root_.scala.Tuple4[Int, String, Option[String], Option[thrift.Location]] = {
    (
      villainId,
      name,
      description,
      hideoutLocation
    )
  }


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeVillainIdValue(villainId, _oprot)
                _root_.scala.Some(Villain.VillainIdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (name ne null) {
                writeNameValue(name, _oprot)
                _root_.scala.Some(Villain.NameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (description.isDefined) {
                writeDescriptionValue(description.get, _oprot)
                _root_.scala.Some(Villain.DescriptionField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (hideoutLocation.isDefined) {
                writeHideoutLocationValue(hideoutLocation.get, _oprot)
                _root_.scala.Some(Villain.HideoutLocationField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Villain = {
    var villainId: Int = this.villainId
    var name: String = this.name
    var description: _root_.scala.Option[String] = this.description
    var hideoutLocation: _root_.scala.Option[thrift.Location] = this.hideoutLocation
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        villainId = readVillainIdValue(_blob.read)
      case 2 =>
        name = readNameValue(_blob.read)
      case 3 =>
        description = _root_.scala.Some(readDescriptionValue(_blob.read))
      case 5 =>
        hideoutLocation = _root_.scala.Some(readHideoutLocationValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      villainId,
      name,
      description,
      hideoutLocation,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Villain = {
    var villainId: Int = this.villainId
    var name: String = this.name
    var description: _root_.scala.Option[String] = this.description
    var hideoutLocation: _root_.scala.Option[thrift.Location] = this.hideoutLocation

    _fieldId match {
      case 1 =>
        villainId = 0
      case 2 =>
        name = null
      case 3 =>
        description = _root_.scala.None
      case 5 =>
        hideoutLocation = _root_.scala.None
      case _ =>
    }
    new Immutable(
      villainId,
      name,
      description,
      hideoutLocation,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetVillainId: Villain = unsetField(1)

  def unsetName: Villain = unsetField(2)

  def unsetDescription: Villain = unsetField(3)

  def unsetHideoutLocation: Villain = unsetField(5)


  override def write(_oprot: TProtocol): Unit = {
    Villain.validate(this)
    _oprot.writeStructBegin(Struct)
    writeVillainIdField(villainId, _oprot)
    if (name ne null) writeNameField(name, _oprot)
    if (description.isDefined) writeDescriptionField(description.get, _oprot)
    if (hideoutLocation.isDefined) writeHideoutLocationField(hideoutLocation.get, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    villainId: Int = this.villainId,
    name: String = this.name,
    description: _root_.scala.Option[String] = this.description,
    hideoutLocation: _root_.scala.Option[thrift.Location] = this.hideoutLocation,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Villain =
    new Immutable(
      villainId,
      name,
      description,
      hideoutLocation,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Villain]

  private def _equals(x: Villain, y: Villain): Boolean =
      x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[Villain]) &&
      _passthroughFields == other.asInstanceOf[Villain]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 4

  override def productElement(n: Int): Any = n match {
    case 0 => this.villainId
    case 1 => this.name
    case 2 => this.description
    case 3 => this.hideoutLocation
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Villain"

  def _codec: ValidatingThriftStructCodec3[Villain] = Villain
}

